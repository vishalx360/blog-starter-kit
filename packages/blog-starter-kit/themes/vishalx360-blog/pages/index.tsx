import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';
import request from 'graphql-request';
import { GetStaticProps } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import { BiLoaderAlt } from "react-icons/bi";
import { Waypoint } from 'react-waypoint';
import { Container } from '../components/container';
import { AppProvider } from '../components/contexts/appContext';
import { Layout } from '../components/layout';
import AVATARIMAGE from "@/../public/images/vishal.png";

import PostItem from '../components/PostItem';
import StaggerParent from '../components/StaggerParent';
import {
	MorePostsByPublicationDocument,
	MorePostsByPublicationQuery,
	MorePostsByPublicationQueryVariables,
	PageInfoFragment,
	PostFragment,
	PostsByPublicationDocument,
	PostsByPublicationQuery,
	PostsByPublicationQueryVariables,
	PublicationFragment,
} from '../generated/graphql';
import Link from 'next/link';
import { basePath } from '../components/NewNavbar';
import { ArrowLeft, LucideMoveRight } from 'lucide-react';
import BackButton from '../components/BackButton';
import Image from 'next/image';
import { cn } from '../lib/utils';

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;

type Props = {
	publication: PublicationFragment;
	initialPosts: PostFragment[];
	initialPageInfo: PageInfoFragment;
};

export default function Index({ publication, initialPosts, initialPageInfo }: Props) {
	const [posts, setPosts] = useState<PostFragment[]>(initialPosts);
	const [pageInfo, setPageInfo] = useState<Props['initialPageInfo']>(initialPageInfo);
	const [isLoading, setIsLoading] = useState(false);

	const loadMore = async () => {
		setIsLoading(true);
		try {
			const data = await request<MorePostsByPublicationQuery, MorePostsByPublicationQueryVariables>(
				GQL_ENDPOINT,
				MorePostsByPublicationDocument,
				{
					first: 20,
					host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
					after: pageInfo.endCursor,
				},
			);
			if (!data.publication) {
				return;
			}
			const newPosts = data.publication.posts.edges.map((edge) => edge.node);
			setPosts([...posts, ...newPosts]);
			setPageInfo(data.publication.posts.pageInfo);
			setIsLoading(false);
		} catch (err) {

			setIsLoading(false);
		}

	};
	return (
		<AppProvider publication={publication}>
			<Layout>
				<Head>
					<title>{publication.title}</title>
					<meta
						name="description"
						content={
							publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`
						}
					/>
					<meta property="twitter:card" content="summary_large_image" />
					<meta property="twitter:title" content={publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'} />
					<meta property="twitter:description" content={publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`} />
					<meta
						property="og:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<meta
						property="twitter:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<script
						type="application/ld+json"
						dangerouslySetInnerHTML={{
							__html: JSON.stringify(addPublicationJsonLd(publication)),
						}}
					/>
				</Head>
				<Container className="pt-24 sm:pt-32 md:pb-16">
					<div className="mx-auto max-w-5xl px-6 lg:px-8">
						<div className="mx-auto max-w-2xl lg:mx-0">
							<h2 className="text-3xl font-bold tracking-tight text-gray-100 sm:text-4xl">Blog</h2>
							<p className="mt-2 text-lg leading-8 text-gray-300">
								Learn how to grow your business with our expert advice.
							</p>
						</div>
						<StaggerParent className="mx-auto mt-10 grid max-w-2xl grid-cols-1 gap-x-8 gap-y-16 border-t border-gray-200 pt-10 sm:mt-16 sm:pt-16 lg:mx-0 lg:max-w-none lg:grid-cols-3">
							{posts.map((post) => (
								<PostItem key={post.id} post={post} />
							))}
						</StaggerParent>
						{pageInfo.hasNextPage && <div className='w-full mt-10 p-5 grid place-items-center'>
							{isLoading && <BiLoaderAlt className="animate-spin text-xl" />}
						</div>}
						{pageInfo.hasNextPage && pageInfo.endCursor && (
							<Waypoint onEnter={loadMore} bottomOffset={'10%'} />
						)}
					</div>
				</Container>
			</Layout>
		</AppProvider>
	);
}


export const getStaticProps: GetStaticProps<Props> = async () => {
	const data = await request<PostsByPublicationQuery, PostsByPublicationQueryVariables>(
		GQL_ENDPOINT,
		PostsByPublicationDocument,
		{
			first: 20,
			host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
		},
	);

	const publication = data.publication;
	if (!publication) {
		return {
			notFound: true,
		};
	}
	const initialPosts = (publication.posts.edges ?? []).map((edge) => edge.node);

	return {
		props: {
			publication,
			initialPosts,
			initialPageInfo: publication.posts.pageInfo,
		},
		revalidate: 1,
	};
};
